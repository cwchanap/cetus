---
import { cn } from '@/lib/utils'
import type { HTMLAttributes } from 'astro/types'

export interface Props extends HTMLAttributes<'div'> {
  variant?: 'default' | 'glass' | 'outline'
  size?: 'default' | 'sm' | 'lg'
  placeholder?: string
  class?: string
  id?: string
  name?: string
  value?: string
  options: Array<{ value: string; label: string }>
}

const {
  variant = 'default',
  size = 'default',
  placeholder = 'Select an option...',
  class: className = '',
  id,
  name,
  value,
  options,
  ...props
} = Astro.props

const selectVariants = {
  variant: {
    default:
      'bg-gray-800/90 border-gray-600/50 text-white hover:border-cyan-400/50 focus:border-cyan-400',
    glass:
      'bg-glass border-gray-600/30 text-white hover:border-cyan-400/50 focus:border-cyan-400 backdrop-blur-md',
    outline:
      'bg-transparent border-cyan-400/50 text-cyan-400 hover:border-cyan-400 focus:border-cyan-500',
  },
  size: {
    default: 'h-10 px-3 py-2 text-sm',
    sm: 'h-8 px-2 py-1 text-xs',
    lg: 'h-12 px-4 py-3 text-base',
  },
}

const defaultClasses =
  'relative w-full border transition-all duration-200 cursor-pointer focus:outline-none'

const sciFiClasses = 'font-orbitron shadow-lg backdrop-blur-sm'

const selectClasses = cn(
  defaultClasses,
  sciFiClasses,
  selectVariants.variant[variant],
  selectVariants.size[size],
  className
)

const dropdownClasses = cn(
  'absolute top-full left-0 right-0 mt-1 z-50 max-h-60 overflow-auto border bg-gray-800/95 border-gray-600/50 backdrop-blur-md shadow-xl shadow-cyan-400/10',
  'opacity-0 pointer-events-none transition-all duration-200',
  'data-[open]:opacity-100 data-[open]:pointer-events-auto'
)

const optionClasses = cn(
  'px-3 py-2 text-sm text-white cursor-pointer transition-colors duration-150',
  'hover:bg-cyan-400/20 hover:text-cyan-300',
  'focus:bg-cyan-400/30 focus:text-cyan-200 focus:outline-none'
)
---

<div class="relative" {...props}>
  <div
    class={selectClasses}
    style="border-radius: 0.5rem;"
    tabindex="0"
    role="combobox"
    aria-expanded="false"
    aria-haspopup="listbox"
    data-select-trigger
    id={id}
  >
    <span class="block truncate" data-select-value>
      {placeholder}
    </span>
    <span
      class="absolute inset-y-0 right-0 flex items-center pr-3 pointer-events-none"
    >
      <svg
        class="h-5 w-5 text-gray-400 transition-transform duration-200 data-[open]:rotate-180"
        viewBox="0 0 20 20"
        fill="currentColor"
        data-select-icon
      >
        <path
          fill-rule="evenodd"
          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
          clip-rule="evenodd"></path>
      </svg>
    </span>
  </div>

  <div
    class={dropdownClasses}
    style="border-radius: 0.5rem; transform: scale(0.95);"
    data-select-dropdown
    role="listbox"
  >
    {
      options.map(option => (
        <div
          class={optionClasses}
          role="option"
          data-value={option.value}
          data-select-option
        >
          {option.label}
        </div>
      ))
    }
  </div>

  <!-- Hidden input for form submission -->
  <input type="hidden" name={name} value={value} data-select-input />
</div>

<style>
  [data-select-trigger]:focus {
    outline: 2px solid rgb(34 211 238 / 0.5);
    outline-offset: 2px;
  }

  [data-select-dropdown][data-open] {
    opacity: 1;
    pointer-events: auto;
    transform: scale(1);
  }

  [data-select-icon][data-open] {
    transform: rotate(180deg);
  }
</style>

<script>
  class SelectComponent {
    private trigger!: HTMLElement
    private dropdown!: HTMLElement
    private valueSpan!: HTMLElement
    private iconSpan!: HTMLElement
    private hiddenInput!: HTMLInputElement
    private options!: NodeListOf<HTMLElement>
    private isOpen = false
    private selectedValue = ''
    private selectedLabel = ''

    constructor(container: HTMLElement) {
      // Wait for the next tick to ensure all elements are rendered
      setTimeout(() => {
        const trigger = container.querySelector<HTMLElement>(
          '[data-select-trigger]'
        )
        const dropdown = container.querySelector<HTMLElement>(
          '[data-select-dropdown]'
        )
        const valueSpan = container.querySelector<HTMLElement>(
          '[data-select-value]'
        )
        const iconSpan =
          container.querySelector<HTMLElement>('[data-select-icon]')
        const hiddenInput = container.querySelector<HTMLInputElement>(
          '[data-select-input]'
        )
        const options = container.querySelectorAll<HTMLElement>(
          '[data-select-option]'
        )

        if (!trigger || !dropdown || !valueSpan || !iconSpan || !hiddenInput) {
          // Elements not found, possibly due to timing issues
          return
        }

        this.trigger = trigger
        this.dropdown = dropdown
        this.valueSpan = valueSpan
        this.iconSpan = iconSpan
        this.hiddenInput = hiddenInput
        this.options = options

        this.init()
      }, 0)
    }

    private init() {
      // Set initial value if provided
      if (this.hiddenInput) {
        const initialValue = this.hiddenInput.value
        if (initialValue) {
          const initialOption = Array.from(this.options).find(
            option => option.dataset.value === initialValue
          )
          if (initialOption) {
            this.selectOption(initialOption)
          }
        }
      }

      // Event listeners
      this.trigger.addEventListener('click', this.toggle.bind(this))
      this.trigger.addEventListener('keydown', this.handleKeyDown.bind(this))

      this.options.forEach(option => {
        option.addEventListener('click', () => this.selectOption(option))
        option.addEventListener('keydown', this.handleOptionKeyDown.bind(this))
      })

      // Close on outside click
      document.addEventListener('click', this.handleOutsideClick.bind(this))
    }

    private toggle() {
      if (this.isOpen) {
        this.close()
      } else {
        this.open()
      }
    }

    private open() {
      this.isOpen = true
      this.trigger.setAttribute('aria-expanded', 'true')
      this.dropdown.setAttribute('data-open', '')
      this.dropdown.style.transform = 'scale(1)'
      this.iconSpan.setAttribute('data-open', '')

      // Focus first option
      const firstOption = this.options[0]
      if (firstOption) {
        firstOption.focus()
      }
    }

    private close() {
      this.isOpen = false
      this.trigger.setAttribute('aria-expanded', 'false')
      this.dropdown.removeAttribute('data-open')
      this.dropdown.style.transform = 'scale(0.95)'
      this.iconSpan.removeAttribute('data-open')
      this.trigger.focus()
    }

    private selectOption(option: HTMLElement) {
      const value = option.dataset.value
      const label = option.textContent?.trim() || ''

      if (!value) {
        return
      }

      this.selectedValue = value
      this.selectedLabel = label
      this.valueSpan.textContent = label
      this.hiddenInput.value = value

      // Update selected state
      this.options.forEach(opt => opt.removeAttribute('aria-selected'))
      option.setAttribute('aria-selected', 'true')

      // Dispatch change event
      this.hiddenInput.dispatchEvent(new Event('change', { bubbles: true }))

      this.close()
    }

    private handleKeyDown(event: KeyboardEvent) {
      switch (event.key) {
        case 'Enter':
        case ' ':
          event.preventDefault()
          this.toggle()
          break
        case 'Escape':
          this.close()
          break
        case 'ArrowDown':
          event.preventDefault()
          if (!this.isOpen) {
            this.open()
          } else {
            this.focusNextOption()
          }
          break
        case 'ArrowUp':
          event.preventDefault()
          if (this.isOpen) {
            this.focusPrevOption()
          }
          break
      }
    }

    private handleOptionKeyDown(event: KeyboardEvent) {
      const option = event.target as HTMLElement

      switch (event.key) {
        case 'Enter':
        case ' ':
          event.preventDefault()
          this.selectOption(option)
          break
        case 'Escape':
          this.close()
          break
        case 'ArrowDown':
          event.preventDefault()
          this.focusNextOption()
          break
        case 'ArrowUp':
          event.preventDefault()
          this.focusPrevOption()
          break
      }
    }

    private focusNextOption() {
      const currentIndex = Array.from(this.options).indexOf(
        document.activeElement as HTMLElement
      )
      const nextIndex = (currentIndex + 1) % this.options.length
      this.options[nextIndex].focus()
    }

    private focusPrevOption() {
      const currentIndex = Array.from(this.options).indexOf(
        document.activeElement as HTMLElement
      )
      const prevIndex =
        currentIndex <= 0 ? this.options.length - 1 : currentIndex - 1
      this.options[prevIndex].focus()
    }

    private handleOutsideClick(event: Event) {
      const target = event.target as HTMLElement
      if (!this.trigger.contains(target) && !this.dropdown.contains(target)) {
        this.close()
      }
    }
  }

  // Initialize all select components
  const initSelects = () => {
    const selects = document.querySelectorAll('[data-select-trigger]')
    selects.forEach(select => {
      const container = select.closest('.relative') as HTMLElement
      if (container) {
        try {
          new SelectComponent(container)
        } catch (error) {
          // Failed to initialize Select component
        }
      }
    })
  }

  // Try to initialize immediately if DOM is already loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initSelects)
  } else {
    initSelects()
  }
</script>
