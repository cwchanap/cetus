---
import AppLayout from '@/layouts/AppLayout.astro'
import Button from '@/components/ui/Button.astro'
import Card from '@/components/ui/Card.astro'
import Badge from '@/components/ui/Badge.astro'
import GameOverlay from '@/components/GameOverlay.astro'
import AchievementAward from '@/components/AchievementAward.astro'

// Custom navigation for game pages with breadcrumb
const gameNavigation = [
  { href: '/', label: 'Home' },
  { href: '#', label: 'Tetris Challenge' },
]
---

<AppLayout
  title="Tetris Challenge - Cetus Minigames"
  description="Stack the blocks and clear lines in this classic puzzle game with a futuristic twist"
  includeFooter={false}
  navigation={gameNavigation}
>
  <!-- Game Breadcrumb -->
  <div class="px-6 py-4 border-b border-slate-700/50">
    <div class="max-w-7xl mx-auto">
      <div class="flex items-center space-x-3">
        <div class="text-cyan-400 text-sm">üî≤ Tetris Challenge</div>
      </div>
    </div>
  </div>

  <div class="px-6 py-8">
    <div class="max-w-6xl mx-auto">
      <!-- Game Title -->
      <div class="text-center mb-8">
        <h2 class="text-5xl font-orbitron font-bold text-holographic mb-4">
          TETRIS CHALLENGE
        </h2>
        <p class="text-gray-400 text-lg">
          Stack the blocks and clear lines in this classic puzzle game
        </p>
      </div>

      <!-- Game Container -->
      <div class="flex flex-col lg:flex-row gap-8 items-start justify-center">
        <!-- Game Board -->
        <Card variant="glass" class="p-6 flex-shrink-0">
          <div class="flex flex-col items-center space-y-4">
            <!-- Game Status -->
            <div class="flex space-x-4 mb-4">
              <Badge variant="outline" class="px-4 py-2">
                <span class="font-mono">Score: <span id="score">0</span></span>
              </Badge>
              <Badge variant="outline" class="px-4 py-2">
                <span class="font-mono">Level: <span id="level">1</span></span>
              </Badge>
              <Badge variant="outline" class="px-4 py-2">
                <span class="font-mono">Lines: <span id="lines">0</span></span>
              </Badge>
            </div>

            <!-- Tetris Game Container -->
            <div class="relative">
              <div
                id="tetris-container"
                class="border-2 border-cyan-400/50 bg-black/50 rounded-lg shadow-glow-cyan"
                style="width: 300px; height: 600px;"
              >
              </div>

              <GameOverlay defaultTitle="GAME OVER" buttonId="restart-btn">
                <div class="text-lg text-gray-300">
                  Level Reached: <span id="final-level" class="text-cyan-400"
                    >1</span
                  >
                </div>
                <div class="text-lg text-gray-300">
                  Lines Cleared: <span id="final-lines" class="text-green-400"
                    >0</span
                  >
                </div>
                <div class="text-lg text-gray-300">
                  Pieces Placed: <span id="final-pieces" class="text-purple-400"
                    >0</span
                  >
                </div>
                <div class="text-lg text-gray-300">
                  Tetrises: <span id="final-tetrises" class="text-yellow-400"
                    >0</span
                  >
                </div>
              </GameOverlay>
            </div>

            <!-- Game Controls -->
            <div class="flex space-x-2">
              <Button id="start-btn" variant="primary" size="sm">Start</Button>
              <Button
                id="end-btn"
                variant="outline"
                size="sm"
                style="display: none;">End Game</Button
              >
              <Button id="pause-btn" variant="outline" size="sm">Pause</Button>
              <Button id="reset-btn" variant="outline" size="sm">Reset</Button>
            </div>
          </div>
        </Card>

        <!-- Next Piece & Controls -->
        <div class="flex flex-col space-y-6">
          <!-- Next Piece -->
          <Card variant="glass" class="p-6">
            <h3
              class="text-lg font-orbitron font-bold text-cyan-400 mb-4 text-center"
            >
              NEXT PIECE
            </h3>
            <canvas
              id="next-canvas"
              width="120"
              height="120"
              class="border border-cyan-400/30 bg-black/30 rounded-lg mx-auto block"
            ></canvas>
          </Card>

          <!-- Controls Guide -->
          <Card variant="glass" class="p-6">
            <h3 class="text-lg font-orbitron font-bold text-cyan-400 mb-4">
              CONTROLS
            </h3>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-400">Move Left:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">‚Üê</Badge>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Move Right:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">‚Üí</Badge>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Soft Drop:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">‚Üì</Badge>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Hard Drop:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">Space</Badge>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Rotate:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">‚Üë</Badge>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Pause:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">P</Badge>
              </div>
            </div>
          </Card>

          <!-- Statistics -->
          <Card variant="glass" class="p-6">
            <h3 class="text-lg font-orbitron font-bold text-cyan-400 mb-4">
              STATISTICS
            </h3>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-400">Pieces:</span>
                <span id="pieces-count" class="text-white">0</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Singles:</span>
                <span id="singles-count" class="text-white">0</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Doubles:</span>
                <span id="doubles-count" class="text-white">0</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Triples:</span>
                <span id="triples-count" class="text-white">0</span>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Tetrises:</span>
                <span id="tetrises-count" class="text-cyan-400">0</span>
              </div>
            </div>
          </Card>
        </div>
      </div>
    </div>

    <!-- Tetris Game Logic -->
    <script>
      import { initTetrisGame } from '@/lib/games/tetris/init'
      import { saveGameScore } from '@/lib/services/scoreService'
      import { GameID } from '@/lib/games'

      // Initialize game when page loads
      document.addEventListener('DOMContentLoaded', async () => {
        try {
          const gameInstance = await initTetrisGame({
            onGameOver: async (finalScore: number, stats: unknown) => {
              // Update final stats in overlay
              document.getElementById('final-score')!.textContent =
                finalScore.toString()
              document.getElementById('final-level')!.textContent =
                stats.level?.toString() || '1'
              document.getElementById('final-lines')!.textContent =
                stats.lines?.toString() || '0'
              document.getElementById('final-pieces')!.textContent =
                stats.pieces?.toString() || '0'
              document.getElementById('final-tetrises')!.textContent =
                stats.tetrises?.toString() || '0'

              // Show game over overlay
              const gameOverOverlay =
                document.getElementById('game-over-overlay')!
              gameOverOverlay.classList.remove('hidden')

              // Reset buttons
              const startBtn = document.getElementById('start-btn')!
              const endBtn = document.getElementById('end-btn')!
              startBtn.style.display = 'inline-flex'
              endBtn.style.display = 'none'

              // Submit score
              try {
                await saveGameScore(
                  GameID.TETRIS,
                  finalScore,
                  result => {
                    // Handle newly earned achievements
                    if (
                      result.newAchievements &&
                      result.newAchievements.length > 0
                    ) {
                      // Dispatch an event for achievement notifications
                      window.dispatchEvent(
                        new CustomEvent('achievementsEarned', {
                          detail: { achievementIds: result.newAchievements },
                        })
                      )
                    }
                    console.log('Score saved successfully')
                  },
                  error => {
                    console.error('Failed to submit score:', error)
                  }
                )
              } catch (error) {
                console.error('Failed to submit score:', error)
              }

              // Achievement Testing - Show test achievements after game over
              if (
                window.showAchievementAward &&
                window.location.search.includes('test=achievements')
              ) {
                setTimeout(() => {
                  showTestAchievements()
                }, 1000)
              }
            },
          })

          // Add end game button functionality
          const startBtn = document.getElementById('start-btn')!
          const endBtn = document.getElementById('end-btn')!

          // Show end button when game starts
          startBtn.addEventListener('click', () => {
            startBtn.style.display = 'none'
            endBtn.style.display = 'inline-flex'
          })

          // End game button click handler
          endBtn.addEventListener('click', () => {
            if (gameInstance && gameInstance.endGame) {
              gameInstance.endGame()
            }
          })

          // Handle restart button
          document
            .getElementById('restart-btn')
            ?.addEventListener('click', () => {
              const gameOverOverlay =
                document.getElementById('game-over-overlay')!
              gameOverOverlay.classList.add('hidden')
              if (gameInstance && gameInstance.restart) {
                gameInstance.restart()
              }
            })

          // Achievement Testing Functions
          window.showTestAchievements = function () {
            const testAchievements = [
              {
                id: 'test_short',
                name: 'Quick Win',
                description: 'Fast victory!',
                icon: '‚ö°',
                rarity: 'common',
              },
              {
                id: 'test_medium',
                name: 'Strategic Player Achievement',
                description:
                  'You have demonstrated excellent strategic thinking and planning skills in your gameplay.',
                icon: 'üß†',
                rarity: 'rare',
              },
              {
                id: 'test_long',
                name: 'Master of the Cosmic Gaming Universe and Beyond',
                description:
                  'You have achieved the ultimate level of mastery in this cosmic gaming experience, demonstrating exceptional skill, dedication, and perseverance through countless challenges and obstacles.',
                icon: 'üåå',
                rarity: 'epic',
              },
              {
                id: 'test_very_long',
                name: 'The Ultimate Supreme Galactic Champion of All Time and Space Throughout the Entire Known Universe',
                description:
                  'This is an extraordinarily long achievement description that tests how the achievement card handles extremely verbose content. It includes multiple sentences with detailed explanations of what the player has accomplished. The description goes on and on to test the line clamping and overflow handling capabilities of the achievement card component. This should demonstrate how the card maintains consistent sizing even with excessive content.',
                icon: 'üëë',
                rarity: 'legendary',
              },
            ]

            if (window.showAchievementAward) {
              window.showAchievementAward(testAchievements)
            }
          }

          // Add testing buttons if in test mode
          if (window.location.search.includes('test=achievements')) {
            addTestingUI()
          }
        } catch (error) {
          console.error('Failed to initialize Tetris game:', error)
        }
      })

      // Add testing UI function
      function addTestingUI() {
        const testingSection = document.createElement('div')
        testingSection.className =
          'mt-8 p-6 bg-glass-strong rounded-2xl border border-yellow-400/50'
        testingSection.innerHTML = `
          <h3 class="text-lg font-orbitron font-bold text-yellow-400 mb-4 text-center">
            üß™ ACHIEVEMENT TESTING MODE
          </h3>
          <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
            <button id="test-short-btn" class="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 rounded text-sm">
              Short Content
            </button>
            <button id="test-medium-btn" class="bg-green-600 hover:bg-green-700 text-white px-3 py-2 rounded text-sm">
              Medium Content
            </button>
            <button id="test-long-btn" class="bg-purple-600 hover:bg-purple-700 text-white px-3 py-2 rounded text-sm">
              Long Content
            </button>
            <button id="test-very-long-btn" class="bg-red-600 hover:bg-red-700 text-white px-3 py-2 rounded text-sm">
              Very Long Content
            </button>
          </div>
          <div class="grid grid-cols-1 md:grid-cols-2 gap-3">
            <button id="test-mixed-btn" class="bg-yellow-600 hover:bg-yellow-700 text-white px-3 py-2 rounded text-sm">
              Test Mixed Rarities
            </button>
            <button id="test-all-btn" class="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 rounded text-sm">
              Test All Scenarios
            </button>
          </div>
          <p class="text-xs text-gray-400 mt-3 text-center">
            Click buttons to test different achievement card content lengths and verify consistent sizing.
          </p>
        `

        // Insert after the game container
        const gameContainer = document.querySelector('.max-w-6xl')
        if (gameContainer) {
          gameContainer.appendChild(testingSection)
        }

        // Add event listeners for test buttons
        const testAchievements = {
          short: [
            {
              id: 'test_short_1',
              name: 'Quick Win',
              description: 'Fast victory!',
              icon: '‚ö°',
              rarity: 'common',
            },
          ],
          medium: [
            {
              id: 'test_medium_1',
              name: 'Strategic Player Achievement',
              description:
                'You have demonstrated excellent strategic thinking and planning skills in your gameplay.',
              icon: 'üß†',
              rarity: 'rare',
            },
          ],
          long: [
            {
              id: 'test_long_1',
              name: 'Master of the Cosmic Gaming Universe and Beyond',
              description:
                'You have achieved the ultimate level of mastery in this cosmic gaming experience, demonstrating exceptional skill, dedication, and perseverance through countless challenges and obstacles.',
              icon: 'üåå',
              rarity: 'epic',
            },
          ],
          veryLong: [
            {
              id: 'test_very_long_1',
              name: 'The Ultimate Supreme Galactic Champion of All Time and Space Throughout the Entire Known Universe',
              description:
                'This is an extraordinarily long achievement description that tests how the achievement card handles extremely verbose content. It includes multiple sentences with detailed explanations of what the player has accomplished. The description goes on and on to test the line clamping and overflow handling capabilities of the achievement card component. This should demonstrate how the card maintains consistent sizing even with excessive content.',
              icon: 'üëë',
              rarity: 'legendary',
            },
          ],
          mixed: [
            {
              id: 'test_mixed_1',
              name: 'Short',
              description: 'Brief.',
              icon: 'üéØ',
              rarity: 'common',
            },
            {
              id: 'test_mixed_2',
              name: 'Medium Length Achievement Name',
              description:
                'This is a moderately long description that provides a good balance of information.',
              icon: 'üíé',
              rarity: 'rare',
            },
            {
              id: 'test_mixed_3',
              name: 'Very Long Achievement Name That Tests Wrapping',
              description:
                "An extremely detailed description that explains every aspect of this achievement in great detail, testing the card's ability to handle varying content lengths consistently.",
              icon: 'üåü',
              rarity: 'epic',
            },
          ],
        }

        document
          .getElementById('test-short-btn')
          ?.addEventListener('click', () => {
            if (window.showAchievementAward) {
              window.showAchievementAward(testAchievements.short)
            }
          })

        document
          .getElementById('test-medium-btn')
          ?.addEventListener('click', () => {
            if (window.showAchievementAward) {
              window.showAchievementAward(testAchievements.medium)
            }
          })

        document
          .getElementById('test-long-btn')
          ?.addEventListener('click', () => {
            if (window.showAchievementAward) {
              window.showAchievementAward(testAchievements.long)
            }
          })

        document
          .getElementById('test-very-long-btn')
          ?.addEventListener('click', () => {
            if (window.showAchievementAward) {
              window.showAchievementAward(testAchievements.veryLong)
            }
          })

        document
          .getElementById('test-mixed-btn')
          ?.addEventListener('click', () => {
            if (window.showAchievementAward) {
              window.showAchievementAward(testAchievements.mixed)
            }
          })

        document
          .getElementById('test-all-btn')
          ?.addEventListener('click', () => {
            const allAchievements = [
              ...testAchievements.short,
              ...testAchievements.medium,
              ...testAchievements.long,
              ...testAchievements.veryLong,
            ]
            if (window.showAchievementAward) {
              window.showAchievementAward(allAchievements)
            }
          })
      }
    </script>
  </div>

  <!-- Achievement Award Component -->
  <AchievementAward />
</AppLayout>
