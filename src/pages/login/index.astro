---
import '@/styles/global.css'
import Button from '@/components/ui/Button.astro'
import Card from '@/components/ui/Card.astro'
import Section from '@/components/ui/Section.astro'
import Container from '@/components/ui/Container.astro'
import Heading from '@/components/ui/Heading.astro'
import Navigation from '@/components/ui/Navigation.astro'
import Footer from '@/components/ui/Footer.astro'
---

<html lang="en" class="dark">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>Login - Cetus Gaming Platform</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link
      href="https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Inter:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />
  </head>

  <body
    class="min-h-screen bg-sci-fi-dark text-white overflow-x-hidden scrollbar-sci-fi font-inter"
  >
    <!-- Animated background -->
    <div class="fixed inset-0 pointer-events-none">
      <div
        class="absolute inset-0 bg-gradient-radial from-cyan-400/30 via-transparent to-transparent animate-pulse"
      >
      </div>
      <div
        class="absolute inset-0 bg-gradient-radial from-purple-400/30 via-transparent to-transparent animate-pulse"
        style="animation-delay: 1s;"
      >
      </div>
      <div
        class="absolute inset-0 bg-gradient-radial from-pink-400/20 via-transparent to-transparent animate-pulse"
        style="animation-delay: 2s;"
      >
      </div>
    </div>

    <!-- Floating particles -->
    <div class="fixed inset-0 pointer-events-none">
      {
        Array.from({ length: 20 }).map((_, i) => (
          <div
            class="absolute w-1 h-1 bg-cyan-400 rounded-full opacity-30 animate-bounce"
            style={`
						left: ${Math.random() * 100}%;
						top: ${Math.random() * 100}%;
						animation-delay: ${Math.random() * 3}s;
						animation-duration: ${2 + Math.random() * 2}s;
					`}
          />
        ))
      }
    </div>

    <!-- Header -->
    <Navigation ctaLabel="Home" ctaHref="/" />

    <!-- Login Section -->
    <Section>
      <Container class="max-w-md">
        <div class="text-center mb-8">
          <Heading level={2} variant="section" align="center" class="mb-4">
            PLAYER LOGIN
          </Heading>
          <p class="text-gray-400 text-lg">
            Access your gaming account to continue
          </p>
        </div>

        <Card variant="glass" class="p-8">
          <form id="login-form" class="space-y-6">
            <!-- Username/Email Field -->
            <div class="space-y-2">
              <label
                for="username"
                class="block text-sm font-medium text-cyan-400"
              >
                Username or Email
              </label>
              <input
                type="text"
                id="username"
                name="username"
                class="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/50 transition-all duration-300"
                placeholder="Enter your username or email"
                required
              />
            </div>

            <!-- Password Field -->
            <div class="space-y-2">
              <label
                for="password"
                class="block text-sm font-medium text-cyan-400"
              >
                Password
              </label>
              <input
                type="password"
                id="password"
                name="password"
                class="w-full px-4 py-3 bg-slate-800/50 border border-slate-600 rounded-lg text-white placeholder-gray-400 focus:outline-none focus:border-cyan-400 focus:ring-2 focus:ring-cyan-400/50 transition-all duration-300"
                placeholder="Enter your password"
                required
              />
            </div>

            <!-- Remember Me & Forgot Password -->
            <div class="flex items-center justify-between">
              <label class="flex items-center">
                <input
                  type="checkbox"
                  class="w-4 h-4 text-cyan-400 bg-slate-800 border-slate-600 rounded focus:ring-cyan-400 focus:ring-2"
                />
                <span class="ml-2 text-sm text-gray-300">Remember me</span>
              </label>
              <a
                href="#"
                class="text-sm text-cyan-400 hover:text-cyan-300 transition-colors duration-300"
              >
                Forgot password?
              </a>
            </div>

            <!-- Login Button -->
            <button
              type="submit"
              class="w-full inline-flex items-center justify-center h-11 rounded-md px-8 bg-gradient-to-r from-cyan-500 to-purple-600 text-white shadow-lg shadow-purple-500/25 hover:from-cyan-400 hover:to-purple-500 font-bold transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-opacity-50 text-sm"
            >
              <span class="flex items-center justify-center">
                <span class="mr-2">üöÄ</span>
                Login to Play
              </span>
            </button>

            <!-- Error Message -->
            <div
              id="error-message"
              class="hidden p-4 bg-red-500/20 border border-red-400/30 rounded-lg text-red-400 text-sm"
            >
            </div>

            <!-- Success Message -->
            <div
              id="success-message"
              class="hidden p-4 bg-green-500/20 border border-green-400/30 rounded-lg text-green-400 text-sm"
            >
            </div>
          </form>

          <!-- Divider -->
          <div class="flex items-center my-6">
            <div class="flex-1 border-t border-slate-600"></div>
            <span class="px-4 text-gray-400 text-sm">or</span>
            <div class="flex-1 border-t border-slate-600"></div>
          </div>

          <!-- Social Login Options -->
          <div class="space-y-3">
            <button
              type="button"
              data-social="google"
              class="w-full inline-flex items-center justify-center h-11 rounded-md px-8 border-2 border-cyan-400 text-cyan-400 bg-transparent hover:bg-cyan-400 hover:text-slate-900 font-bold transition-all duration-300 transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-cyan-400 focus:ring-opacity-50 text-sm"
            >
              <span class="flex items-center justify-center">
                <span class="mr-2">üåê</span>
                Continue with Google
              </span>
            </button>
          </div>

          <!-- Sign Up Link -->
          <div class="text-center mt-6 pt-6 border-t border-slate-600">
            <p class="text-gray-400">
              Don't have an account?
              <a
                href="/signup"
                class="text-cyan-400 hover:text-cyan-300 transition-colors duration-300 font-medium"
              >
                Sign up here
              </a>
            </p>
          </div>
        </Card>
      </Container>
    </Section>

    <!-- Footer -->
    <Footer />

    <script>
      import { authClient } from '@/lib/auth-client'

      document.addEventListener('DOMContentLoaded', () => {
        const loginForm = document.getElementById(
          'login-form'
        ) as HTMLFormElement
        const errorMessage = document.getElementById('error-message')
        const successMessage = document.getElementById('success-message')

        if (loginForm) {
          loginForm.addEventListener('submit', async e => {
            e.preventDefault()

            // Hide previous messages
            if (errorMessage) {
              errorMessage.classList.add('hidden')
            }
            if (successMessage) {
              successMessage.classList.add('hidden')
            }

            // Get form data
            const formData = new FormData(loginForm)
            const email = formData.get('username') as string
            const password = formData.get('password') as string

            // Basic validation
            if (!email || !password) {
              showError('Please fill in all fields.')
              return
            }

            // Show loading state
            const submitButton = loginForm.querySelector(
              'button[type="submit"]'
            ) as HTMLButtonElement
            const originalText = submitButton.innerHTML
            submitButton.innerHTML =
              '<span class="flex items-center justify-center"><span class="mr-2">‚è≥</span>Logging in...</span>'
            submitButton.disabled = true

            try {
              // Use Better Auth for login
              const result = await authClient.signIn.email({
                email,
                password,
                callbackURL: '/',
              })

              if (result.error) {
                showError(
                  result.error.message || 'Login failed. Please try again.'
                )
              } else {
                showSuccess('Login successful! Redirecting to games...')

                // Redirect to games after success
                setTimeout(() => {
                  window.location.href = '/#games'
                }, 1000)
              }
            } catch (error) {
              console.error('Login error:', error)
              showError('An error occurred during login. Please try again.')
            } finally {
              // Reset button
              submitButton.innerHTML = originalText
              submitButton.disabled = false
            }
          })
        }

        // Social login handlers
        const googleBtn = document.querySelector(
          '[data-social="google"]'
        ) as HTMLButtonElement

        if (googleBtn) {
          googleBtn.addEventListener('click', async () => {
            try {
              await authClient.signIn.social({
                provider: 'google',
                callbackURL: '/',
              })
            } catch (error) {
              console.error('Google login error:', error)
              showError('Google login failed. Please try again.')
            }
          })
        }

        // Helper functions
        function showError(message: string) {
          if (errorMessage) {
            errorMessage.textContent = message
            errorMessage.classList.remove('hidden')
          }
        }

        function showSuccess(message: string) {
          if (successMessage) {
            successMessage.textContent = message
            successMessage.classList.remove('hidden')
          }
        }

        // Add glow effects to input fields
        const inputs = document.querySelectorAll(
          'input[type="text"], input[type="password"]'
        )
        inputs.forEach(input => {
          input.addEventListener('focus', () => {
            input.classList.add('shadow-glow-cyan')
          })

          input.addEventListener('blur', () => {
            input.classList.remove('shadow-glow-cyan')
          })
        })

        // Floating particles animation
        const particles = document.querySelectorAll(
          '.animate-bounce'
        ) as NodeListOf<HTMLElement>
        particles.forEach((particle, index) => {
          if (index % 2 === 0) {
            particle.classList.add('animate-float')
          }
        })
      })
    </script>
  </body>
</html>
