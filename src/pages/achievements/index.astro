---
import AppLayout from '@/layouts/AppLayout.astro'

// Component Imports
import Container from '@/components/ui/Container.astro'
import Section from '@/components/ui/Section.astro'
import Heading from '@/components/ui/Heading.astro'
import Card from '@/components/ui/Card.astro'
import Badge from '@/components/ui/Badge.astro'
import Button from '@/components/ui/Button.astro'

import Tabs from '@/components/ui/Tabs.astro'
import TabsTrigger from '@/components/ui/TabsTrigger.astro'
import TabsContent from '@/components/ui/TabsContent.astro'
import Pagination from '@/components/ui/Pagination.astro'

import { getUserAchievements } from '@/lib/server/db/queries'
import {
  AchievementRarity,
  getRarityColor,
  getRarityGlow,
  getAllAchievements,
  getPaginatedAchievements,
} from '@/lib/achievements'
import { getAllGames } from '@/lib/games'

// Check if user is authenticated
const user = Astro.locals.user

// Redirect to login if not authenticated
if (!user) {
  return Astro.redirect('/login?redirect=/achievements')
}

// Get pagination parameters from URL
const url = new URL(Astro.request.url)
const currentPage = Math.max(
  1,
  parseInt(url.searchParams.get('page') || '1', 10)
)
const pageSize = 10 // Default page size

// Get all achievements and user's earned achievements
const userAchievementRecords = await getUserAchievements(user.id)
const allAchievements = getAllAchievements()
const games = getAllGames()

// Process achievements data
const earnedAchievementIds = new Set(
  userAchievementRecords.map(ua => ua.achievement_id)
)

// Combine earned and unearned achievements for display
const allAchievementDisplayData = allAchievements
  .map(achievement => {
    const isEarned = earnedAchievementIds.has(achievement.id)
    const userAchievement = userAchievementRecords.find(
      ua => ua.achievement_id === achievement.id
    )

    return {
      ...achievement,
      earned: isEarned,
      earnedAt: userAchievement?.earned_at,
      rarityColor: getRarityColor(achievement.rarity),
      rarityGlow: getRarityGlow(achievement.rarity),
    }
  })
  .sort((a, b) => {
    // Sort by earned status first (earned first), then by rarity, then by name
    if (a.earned !== b.earned) {
      return b.earned ? 1 : -1
    }
    const rarityOrder = {
      [AchievementRarity.COMMON]: 1,
      [AchievementRarity.RARE]: 2,
      [AchievementRarity.EPIC]: 3,
      [AchievementRarity.LEGENDARY]: 4,
    }
    const rarityDiff =
      (rarityOrder[a.rarity as keyof typeof rarityOrder] || 1) -
      (rarityOrder[b.rarity as keyof typeof rarityOrder] || 1)
    return rarityDiff !== 0 ? rarityDiff : a.name.localeCompare(b.name)
  })

// Apply pagination to the full achievement list
const paginatedResults = getPaginatedAchievements(
  allAchievementDisplayData,
  currentPage,
  pageSize
)
const achievementDisplayData = paginatedResults.achievements

// Group all achievements by game (for non-paginated tabs)
const allAchievementsByGame = allAchievementDisplayData.reduce(
  (acc, achievement) => {
    const gameId = achievement.gameId || 'global'
    if (!acc[gameId]) {
      acc[gameId] = []
    }
    acc[gameId].push(achievement)
    return acc
  },
  {} as Record<string, typeof allAchievementDisplayData>
)

// Get game filter options
const gameFilterOptions = [
  { value: 'all', label: 'All Games' },
  { value: 'global', label: 'Global' },
  ...games
    .filter(game => allAchievementsByGame[game.id]) // Only show games with achievements
    .map(game => ({ value: game.id, label: game.name })),
]

// Create tabs data for games with achievements
const tabsData = [
  {
    id: 'all',
    label: 'All',
    achievements: achievementDisplayData, // Use paginated data for "All" tab
    isPaginated: true,
    paginationData: paginatedResults,
  },
  {
    id: 'global',
    label: 'Global',
    achievements: allAchievementsByGame['global'] || [],
    isPaginated: false,
  },
  ...games
    .filter(game => allAchievementsByGame[game.id])
    .map(game => ({
      id: game.id,
      label: game.name,
      achievements: allAchievementsByGame[game.id] || [],
      isPaginated: false,
    })),
]

// Get stats
const totalEarnedCount = earnedAchievementIds.size
const totalAchievementsCount = allAchievements.length
---

<AppLayout
  title="Achievements - Cetus Gaming Platform"
  description="View all your achievements and progress on Cetus"
>
  <!-- Animated background -->
  <div class="fixed inset-0 pointer-events-none">
    <div
      class="absolute inset-0 bg-gradient-radial from-cyan-400/20 via-transparent to-transparent animate-pulse"
    >
    </div>
    <div
      class="absolute inset-0 bg-gradient-radial from-purple-400/20 via-transparent to-transparent animate-pulse"
      style="animation-delay: 1s;"
    >
    </div>
    <div
      class="absolute inset-0 bg-gradient-radial from-pink-400/15 via-transparent to-transparent animate-pulse"
      style="animation-delay: 2s;"
    >
    </div>
  </div>

  <!-- Floating particles -->
  <div class="fixed inset-0 pointer-events-none">
    {
      Array.from({ length: 20 }).map((_, _i) => (
        <div
          class="absolute w-1 h-1 bg-cyan-400 rounded-full opacity-20 animate-bounce"
          style={`
            left: ${Math.random() * 100}%;
            top: ${Math.random() * 100}%;
            animation-delay: ${Math.random() * 3}s;
            animation-duration: ${2 + Math.random() * 2}s;
          `}
        />
      ))
    }
  </div>

  <!-- Achievements Content -->
  <main class="relative z-10 min-h-screen">
    <Section class="py-20">
      <Container class="max-w-6xl">
        <!-- Page Title -->
        <div class="text-center mb-12">
          <Heading level={1} variant="hero" align="center" class="mb-4">
            ACHIEVEMENTS
          </Heading>
          <p class="text-gray-400 text-lg mb-6">
            Track your progress and unlock badges across all games
          </p>

          <!-- Achievement Stats -->
          <div class="flex justify-center gap-8 mb-8">
            <div class="text-center">
              <div class="text-3xl font-bold text-cyan-400">
                {totalEarnedCount}
              </div>
              <div class="text-sm text-gray-400">Earned</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-purple-400">
                {totalAchievementsCount}
              </div>
              <div class="text-sm text-gray-400">Total</div>
            </div>
            <div class="text-center">
              <div class="text-3xl font-bold text-pink-400">
                {Math.round((totalEarnedCount / totalAchievementsCount) * 100)}%
              </div>
              <div class="text-sm text-gray-400">Complete</div>
            </div>
          </div>

          <!-- Quick Navigation -->
          <div class="flex flex-wrap justify-center gap-4 mb-8">
            <Button variant="outline" size="sm">
              <a
                href="/leaderboard"
                class="text-cyan-400 no-underline flex items-center gap-2"
              >
                <span>üèÜ</span>
                Leaderboards
              </a>
            </Button>
            <Button variant="outline" size="sm">
              <a
                href="/dashboard"
                class="text-cyan-400 no-underline flex items-center gap-2"
              >
                <span>üìä</span>
                Dashboard
              </a>
            </Button>
            <Button variant="outline" size="sm">
              <a
                href="/"
                class="text-cyan-400 no-underline flex items-center gap-2"
              >
                <span>üè†</span>
                Home
              </a>
            </Button>
          </div>
        </div>

        <!-- Achievements Section -->
        <Card variant="glass" class="p-6 md:p-8">
          <!-- Game Filter Tabs -->
          <div class="mb-8">
            <!-- Enhanced Game Tabs Filter -->
            <div class="relative">
              <!-- Background glow effects -->
              <div
                class="absolute inset-0 bg-gradient-to-r from-cyan-500/5 via-purple-500/5 to-pink-500/5 rounded-xl blur-lg"
              >
              </div>
              <div
                class="absolute inset-0 bg-gradient-to-b from-transparent via-cyan-400/5 to-transparent rounded-xl"
              >
              </div>

              <Tabs
                variant="glass"
                defaultTab="all"
                data-default-tab="all"
                class="relative"
              >
                <div
                  slot="tabs"
                  class="gap-3 p-4 bg-gray-900/30 rounded-xl border border-cyan-400/20 backdrop-blur-md"
                >
                  {
                    tabsData.map(tab => (
                      <TabsTrigger
                        value={tab.id}
                        class="font-orbitron font-semibold px-6 py-3 rounded-lg border border-transparent hover:text-holographic hover:border-cyan-400/50 hover:bg-cyan-500/10 hover:glow-cyan transition-all duration-300 relative group"
                      >
                        <div class="flex items-center gap-3">
                          <span class="text-lg">
                            {tab.id === 'all'
                              ? 'üåü'
                              : tab.id === 'global'
                                ? 'üåç'
                                : 'üéØ'}
                          </span>
                          <span>{tab.label}</span>
                          <Badge
                            variant="outline"
                            size="sm"
                            class="border-cyan-400/30 text-cyan-400 bg-cyan-500/10 group-hover:bg-cyan-500/20 group-hover:border-cyan-400/50 transition-all duration-300"
                          >
                            {tab.id === 'all'
                              ? `${allAchievementDisplayData.filter(a => a.earned).length}/${allAchievementDisplayData.length}`
                              : `${tab.achievements.filter(a => a.earned).length}/${tab.achievements.length}`}
                          </Badge>
                        </div>

                        <div class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-0 h-0.5 bg-gradient-to-r from-cyan-400 to-purple-400 group-data-[state=active]:w-full transition-all duration-300" />
                      </TabsTrigger>
                    ))
                  }
                </div>

                <div slot="panels">
                  {
                    tabsData.map(tab => (
                      <TabsContent value={tab.id}>
                        {tab.achievements.length > 0 ? (
                          <div class="space-y-6">
                            <div class="space-y-4">
                              {tab.achievements.map(achievement => (
                                <div
                                  class={`
                                relative p-4 md:p-6 rounded-xl border transition-all duration-300 hover:scale-[1.02] w-full
                                ${
                                  achievement.earned
                                    ? `bg-gradient-to-r from-${achievement.rarity === AchievementRarity.LEGENDARY ? 'yellow' : achievement.rarity === AchievementRarity.EPIC ? 'purple' : achievement.rarity === AchievementRarity.RARE ? 'blue' : 'green'}-500/10 to-cyan-500/10 border-${achievement.rarity === AchievementRarity.LEGENDARY ? 'yellow' : achievement.rarity === AchievementRarity.EPIC ? 'purple' : achievement.rarity === AchievementRarity.RARE ? 'blue' : 'green'}-400/30 ${achievement.rarityGlow}`
                                    : 'bg-gray-800/30 border-gray-700/50 opacity-60'
                                }
                              `}
                                >
                                  <div class="flex items-start gap-6">
                                    <div class="flex-shrink-0">
                                      <div
                                        class={`
                                      text-3xl md:text-4xl p-3 md:p-4 rounded-full border
                                      ${
                                        achievement.earned
                                          ? achievement.rarityColor
                                          : 'bg-gray-700/50 border-gray-600/50'
                                      }
                                    `}
                                      >
                                        {achievement.logo}
                                      </div>
                                    </div>

                                    <div class="flex-1 min-w-0">
                                      <div class="flex flex-col sm:flex-row sm:items-start sm:justify-between gap-4">
                                        <div class="flex-1">
                                          <h4 class="font-orbitron font-bold text-white text-lg md:text-xl mb-2">
                                            {achievement.name}
                                          </h4>
                                          <p class="text-sm md:text-base text-gray-400 mb-3">
                                            {achievement.description}
                                          </p>
                                          <div class="flex flex-wrap items-center gap-2 mb-2">
                                            <Badge
                                              variant={
                                                achievement.earned
                                                  ? 'success'
                                                  : 'outline'
                                              }
                                              size="sm"
                                              class="w-fit"
                                            >
                                              {achievement.earned
                                                ? 'Earned'
                                                : 'Locked'}
                                            </Badge>
                                            <Badge
                                              variant="outline"
                                              size="sm"
                                              class={`w-fit capitalize ${achievement.rarityColor}`}
                                            >
                                              {achievement.rarity}
                                            </Badge>
                                            {achievement.gameId !==
                                              'global' && (
                                              <Badge
                                                variant="outline"
                                                size="sm"
                                                class="w-fit text-purple-400 border-purple-400/30"
                                              >
                                                {achievement.gameId.replace(
                                                  '_',
                                                  ' '
                                                )}
                                              </Badge>
                                            )}
                                          </div>
                                          {achievement.earned &&
                                            achievement.earnedAt && (
                                              <p class="text-sm text-cyan-400">
                                                Earned{' '}
                                                {new Date(
                                                  achievement.earnedAt
                                                ).toLocaleDateString('en-US', {
                                                  year: 'numeric',
                                                  month: 'long',
                                                  day: 'numeric',
                                                  hour: '2-digit',
                                                  minute: '2-digit',
                                                })}
                                              </p>
                                            )}
                                        </div>
                                      </div>
                                    </div>
                                  </div>

                                  {!achievement.earned && (
                                    <div class="absolute inset-0 bg-black/20 rounded-xl flex items-center justify-end pr-4">
                                      <div class="text-gray-500 text-3xl md:text-4xl">
                                        üîí
                                      </div>
                                    </div>
                                  )}
                                </div>
                              ))}
                            </div>

                            {/* Add pagination for "All" tab */}
                            {tab.id === 'all' &&
                              tab.isPaginated &&
                              tab.paginationData && (
                                <Pagination
                                  currentPage={tab.paginationData.page}
                                  totalPages={tab.paginationData.totalPages}
                                  pageSize={tab.paginationData.pageSize}
                                  total={tab.paginationData.total}
                                  class="mt-8"
                                />
                              )}
                          </div>
                        ) : (
                          <div class="text-center py-12">
                            <div class="text-6xl mb-4 opacity-50">üèÜ</div>
                            <p class="text-gray-400">
                              No achievements in this category yet
                            </p>
                            <p class="text-sm text-gray-500 mt-2">
                              Play games to start earning achievements!
                            </p>
                          </div>
                        )}
                      </TabsContent>
                    ))
                  }
                </div>
              </Tabs>
            </div>
          </div>
        </Card>
      </Container>
    </Section>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const tabsContainer = document.querySelector('[data-tabs-container]')

        if (tabsContainer) {
          // Listen for tab changes to reset pagination
          tabsContainer.addEventListener('tab-change', (event: any) => {
            const selectedTab = event.detail.value

            // Reset to first page when switching tabs (if on paginated content)
            if (selectedTab === 'all') {
              const currentUrl = new URL(window.location.href)
              const currentPage = currentUrl.searchParams.get('page')
              if (currentPage && currentPage !== '1') {
                currentUrl.searchParams.set('page', '1')
                window.location.href = currentUrl.toString()
              }
            }
          })
        }

        // Add glow effect on achievement cards
        const achievementCards = document.querySelectorAll('[data-achievement]')
        achievementCards.forEach(card => {
          card.addEventListener('mouseenter', () => {
            if (!card.classList.contains('opacity-60')) {
              card.classList.add('glow-cyan')
            }
          })

          card.addEventListener('mouseleave', () => {
            card.classList.remove('glow-cyan')
          })
        })
      })
    </script>
  </main>
</AppLayout>
