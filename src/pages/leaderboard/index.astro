---
import AppLayout from '@/layouts/AppLayout.astro'

// Component Imports
import Container from '@/components/ui/Container.astro'
import Section from '@/components/ui/Section.astro'
import Heading from '@/components/ui/Heading.astro'
import Card from '@/components/ui/Card.astro'
import Select from '@/components/ui/Select.astro'
import Avatar from '@/components/ui/Avatar.astro'

// Server-side data fetching
import { getAllGames } from '@/lib/games'
import { getGameLeaderboard } from '@/lib/server/db/queries'

// Define types
type LeaderboardEntry = {
  name: string
  score: number
  created_at: string
  image: string | null
  achievements?: string[]
}

// Fetch all games and leaderboards
const games = getAllGames()
const gameLeaderboards: Record<string, LeaderboardEntry[]> = {}

// Fetch leaderboard data for each game
for (const game of games) {
  gameLeaderboards[game.id] = await getGameLeaderboard(game.id, 10)
}

// Game icons mapping
const gameIcons: { [key: string]: string } = {
  tetris: 'üî≤',
  bubble_shooter: 'ü´ß',
  quick_math: 'üßÆ',
  memory_matrix: 'üß†',
  word_scramble: 'üìù',
  reflex: '‚ö°',
  sudoku: 'üß©',
  path_navigator: 'üéÆ',
}

// Category color utility
const getCategoryColor = (category: string) => {
  const colors: { [key: string]: string } = {
    puzzle: 'from-purple-500 to-pink-500',
    action: 'from-red-500 to-orange-500',
    strategy: 'from-green-500 to-teal-500',
    trivia: 'from-blue-500 to-cyan-500',
  }
  return colors[category] || 'from-gray-500 to-gray-600'
}

// Create tabs data
const tabsData = games.map(game => ({
  id: game.id,
  label: game.name,
  games: [game],
  icon: gameIcons[game.id] || 'üéÆ',
}))

const defaultGameId = games[0]?.id || 'tetris'
---

<AppLayout title="Leaderboards - Cetus Gaming Platform">
  <main class="relative z-10 min-h-screen">
    <Section class="py-20">
      <Container class="max-w-6xl">
        {/* Page Title */}
        <div class="mb-12">
          <div
            class="inline-flex items-center justify-center w-16 h-16 bg-gradient-to-r from-cyan-400 to-purple-500 rounded-full mb-6"
          >
            <span class="text-2xl">üèÜ</span>
          </div>
          <Heading
            level={1}
            align="center"
            class="text-4xl md:text-5xl font-bold mb-4"
          >
            <span class="holographic-text">Leaderboards</span>
          </Heading>
          <p class="text-xl text-gray-300 max-w-2xl mx-auto">
            Compete for the top scores across all games. See who's dominating
            the leaderboard!
          </p>
        </div>

        <Card variant="glass" class="p-8">
          <div class="relative">
            {/* Background effects */}
            <div
              class="absolute inset-0 bg-gradient-to-b from-transparent via-cyan-400/5 to-transparent rounded-xl"
            >
            </div>

            {/* Game Selector Dropdown */}
            <div class="mb-8 flex justify-end">
              <Select
                client:load
                options={tabsData.map(tab => ({
                  value: tab.id,
                  label: `${tab.icon} ${tab.label}`,
                }))}
                placeholder="Select a game..."
                class="w-96"
                id="game-selector"
                name="game-selector"
                value={defaultGameId}
                data-select-game
              />
            </div>

            {/* Game Leaderboards */}
            <div data-game-leaderboards>
              {
                tabsData.map(tab => (
                  <div
                    data-game-leaderboard={tab.id}
                    data-game-id={tab.id}
                    class={tab.id === defaultGameId ? '' : 'hidden'}
                  >
                    <div class="w-full max-w-4xl mx-auto">
                      {tab.games.map(game => {
                        const leaderboard = gameLeaderboards[game.id] || []
                        const categoryColor = getCategoryColor(game.category)
                        const gameHighestScore =
                          leaderboard.length > 0
                            ? Math.max(...leaderboard.map(entry => entry.score))
                            : 0

                        return (
                          <div>
                            {/* Game Header */}
                            <div class="flex items-center gap-6 mb-8">
                              <div
                                class={`w-16 h-16 bg-gradient-to-r ${categoryColor} rounded-xl flex items-center justify-center`}
                              >
                                <span class="text-white font-bold text-2xl">
                                  {gameIcons[game.id] || 'üéÆ'}
                                </span>
                              </div>
                              <div class="flex-1">
                                <h3 class="text-2xl font-bold text-white mb-2">
                                  {game.name} Leaderboard
                                </h3>
                                <div class="flex items-center gap-4 text-sm">
                                  <span
                                    class={`px-2 py-1 rounded-full bg-gradient-to-r ${categoryColor} text-white`}
                                  >
                                    {game.category}
                                  </span>
                                  <span class="text-gray-400">
                                    {leaderboard.length} entries
                                  </span>
                                  {gameHighestScore > 0 && (
                                    <span class="text-cyan-400 font-bold">
                                      {gameHighestScore.toLocaleString()}{' '}
                                      highest score
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>

                            {/* Leaderboard Content */}
                            <div class="space-y-4">
                              {leaderboard.length > 0 ? (
                                leaderboard.map((entry, index) => (
                                  <div class="flex items-center justify-between p-4 bg-gray-800/50 rounded-lg border border-gray-700/50 hover:border-cyan-400/50 transition-colors">
                                    <div class="flex items-center gap-4">
                                      <div
                                        class={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-bold ${
                                          index === 0
                                            ? 'bg-yellow-500 text-black'
                                            : index === 1
                                              ? 'bg-gray-400 text-black'
                                              : index === 2
                                                ? 'bg-orange-600 text-white'
                                                : 'bg-gray-700 text-white'
                                        }`}
                                      >
                                        {index + 1}
                                      </div>
                                      <Avatar
                                        size="sm"
                                        variant="cyan-purple"
                                        src={entry.image || undefined}
                                        alt={`${entry.name || 'Anonymous'} avatar`}
                                        fallback={(
                                          entry.name?.[0] || 'A'
                                        ).toUpperCase()}
                                      />
                                      <div>
                                        <div class="font-semibold text-white">
                                          {entry.name || 'Anonymous'}
                                        </div>
                                        <div class="text-sm text-gray-400">
                                          {new Date(
                                            entry.created_at
                                          ).toLocaleDateString()}
                                        </div>
                                      </div>
                                    </div>
                                    <div class="text-right">
                                      <div class="text-xl font-bold text-cyan-400">
                                        {entry.score.toLocaleString()}
                                      </div>
                                      {entry.achievements &&
                                        entry.achievements.length > 0 && (
                                          <div class="text-sm text-yellow-400">
                                            {entry.achievements.join(', ')}
                                          </div>
                                        )}
                                    </div>
                                  </div>
                                ))
                              ) : (
                                <div class="text-center py-12">
                                  <div class="w-16 h-16 mx-auto mb-4 bg-gray-800 rounded-full flex items-center justify-center">
                                    <span class="text-2xl">üéØ</span>
                                  </div>
                                  <p class="text-gray-400 mb-4">
                                    No scores yet!
                                  </p>
                                  <p class="text-sm text-gray-500 mb-6">
                                    Be the first to play and set a record.
                                  </p>
                                  <a
                                    href={`/${game.id}`}
                                    class="inline-flex items-center px-4 py-2 bg-cyan-500 hover:bg-cyan-600 text-white rounded-lg transition-colors"
                                  >
                                    Play {game.name} üéÆ
                                  </a>
                                </div>
                              )}
                            </div>
                          </div>
                        )
                      })}
                    </div>
                  </div>
                ))
              }
            </div>
          </div>
        </Card>
      </Container>
    </Section>

    <script>
      document.addEventListener('DOMContentLoaded', () => {
        const gameSelector = document.getElementById('game-selector')
        const gameSelectorDropdown = document.querySelector<HTMLElement>(
          '[data-select-dropdown]'
        )
        const selectedValueDisplay = gameSelector?.querySelector('span')
        const hiddenInput = document.querySelector(
          'input[data-select-input]'
        ) as HTMLInputElement
        const leaderboards = document.querySelectorAll(
          '[data-game-leaderboard]'
        )

        if (
          !gameSelector ||
          !gameSelectorDropdown ||
          !selectedValueDisplay ||
          !hiddenInput ||
          !leaderboards.length
        ) {
          return
        }

        function updateLeaderboardVisibility(selectedGameId: string) {
          leaderboards.forEach(leaderboard => {
            const gameId = leaderboard.getAttribute('data-game-id')
            leaderboard.classList.toggle('hidden', gameId !== selectedGameId)
          })
        }

        const alignDropdownWidth = () => {
          const width = gameSelector.getBoundingClientRect().width
          gameSelectorDropdown.style.width = `${width}px`
        }

        const resizeObserver = new ResizeObserver(alignDropdownWidth)
        resizeObserver.observe(gameSelector)
        alignDropdownWidth()

        const toggleDropdown = (forceClose = false) => {
          const isOpen = gameSelectorDropdown.hasAttribute('data-open')
          if (forceClose || isOpen) {
            gameSelectorDropdown.removeAttribute('data-open')
          } else {
            gameSelectorDropdown.setAttribute('data-open', 'true')
          }
        }

        gameSelector.addEventListener('click', e => {
          e.stopPropagation()
          toggleDropdown()
        })

        const options = gameSelectorDropdown.querySelectorAll(
          '[data-select-option]'
        )
        options.forEach(option => {
          option.addEventListener('click', e => {
            e.stopPropagation()
            const target = e.currentTarget as HTMLElement
            const gameId = target.getAttribute('data-value')
            const gameName = target.textContent?.trim()

            if (gameId && gameName) {
              selectedValueDisplay.textContent = gameName
              hiddenInput.value = gameId
              hiddenInput.dispatchEvent(new Event('change', { bubbles: true }))
              updateLeaderboardVisibility(gameId)
            }
            toggleDropdown(true)
          })
        })

        document.addEventListener('click', () => toggleDropdown(true))

        updateLeaderboardVisibility(hiddenInput.value || 'tetris')
      })
    </script>
  </main>
</AppLayout>

<style>
  .holographic-text {
    background: linear-gradient(45deg, #00ffff, #ff00ff, #ffff00, #00ffff);
    background-size: 400% 400%;
    -webkit-background-clip: text;
    background-clip: text;
    -webkit-text-fill-color: transparent;
    animation: holographic 3s ease-in-out infinite;
  }

  @keyframes holographic {
    0%,
    100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }
</style>
