---
import AppLayout from '@/layouts/AppLayout.astro'
import Button from '@/components/ui/Button.astro'
import Card from '@/components/ui/Card.astro'
import Badge from '@/components/ui/Badge.astro'
import GameOverlay from '@/components/GameOverlay.astro'

// Custom navigation for game pages with breadcrumb
const gameNavigation = [
  { href: '/', label: 'Home' },
  { href: '#', label: 'Bubble Shooter' },
]
---

<AppLayout
  title="Bubble Shooter - Cetus Minigames"
  description="Match bubbles of the same color in this classic arcade game with a futuristic twist"
  includeFooter={false}
  navigation={gameNavigation}
>
  <!-- Game Breadcrumb -->
  <div class="px-6 py-4 border-b border-slate-700/50">
    <div class="max-w-7xl mx-auto">
      <div class="flex items-center space-x-3">
        <div class="text-cyan-400 text-sm">ðŸ«§ Bubble Shooter</div>
      </div>
    </div>
  </div>

  <div class="px-6 py-8">
    <div class="max-w-6xl mx-auto">
      <!-- Game Title -->
      <div class="text-center mb-8">
        <h2 class="text-5xl font-orbitron font-bold text-holographic mb-4">
          BUBBLE SHOOTER
        </h2>
        <p class="text-gray-400 text-lg">
          Match 3 or more bubbles of the same color to clear them
        </p>
      </div>

      <!-- Game Container -->
      <div class="flex flex-col lg:flex-row gap-8 items-start justify-center">
        <!-- Game Board -->
        <Card variant="glass" class="p-6 flex-shrink-0">
          <div class="flex flex-col items-center space-y-4">
            <!-- Game Status -->
            <div class="flex space-x-4 mb-4">
              <Badge variant="outline" class="px-4 py-2">
                <span class="font-mono">Score: <span id="score">0</span></span>
              </Badge>
              <Badge variant="outline" class="px-4 py-2">
                <span class="font-mono"
                  >Bubbles: <span id="bubbles-remaining">0</span></span
                >
              </Badge>
            </div>

            <!-- Game Canvas -->
            <div class="relative">
              <div
                id="game-container"
                class="border-2 border-cyan-400/50 bg-black/50 rounded-lg shadow-glow-cyan"
                style="width: 600px; height: 800px;"
              >
              </div>

              <GameOverlay defaultTitle="GAME OVER" buttonId="restart-btn">
                <div class="text-lg text-gray-300">
                  Bubbles Popped: <span
                    id="final-bubbles-popped"
                    class="text-green-400">0</span
                  >
                </div>
                <div class="text-lg text-gray-300">
                  Shots Fired: <span id="final-shots" class="text-cyan-400"
                    >0</span
                  >
                </div>
                <div class="text-lg text-gray-300">
                  Accuracy: <span id="final-accuracy" class="text-purple-400"
                    >0%</span
                  >
                </div>
                <div class="text-lg text-gray-300">
                  Largest Combo: <span id="final-combo" class="text-yellow-400"
                    >0</span
                  >
                </div>
              </GameOverlay>

              <!-- Pause Overlay -->
              <div
                id="pause-overlay"
                class="absolute inset-0 bg-black/80 rounded-lg flex items-center justify-center hidden"
              >
                <div class="text-center">
                  <h3
                    class="text-3xl font-orbitron font-bold text-cyan-400 mb-4"
                  >
                    PAUSED
                  </h3>
                  <Button id="resume-btn" variant="primary">Resume</Button>
                </div>
              </div>
            </div>

            <!-- Game Controls -->
            <div class="flex space-x-2">
              <Button id="start-btn" variant="primary" size="sm">Start</Button>
              <Button
                id="end-btn"
                variant="outline"
                size="sm"
                style="display: none;">End Game</Button
              >
              <Button id="pause-btn" variant="outline" size="sm">Pause</Button>
              <Button id="reset-btn" variant="outline" size="sm">Reset</Button>
            </div>
          </div>
        </Card>

        <!-- Game Info & Controls -->
        <div class="flex flex-col space-y-6">
          <!-- Current Bubble -->
          <Card variant="glass" class="p-6">
            <h3
              class="text-lg font-orbitron font-bold text-cyan-400 mb-4 text-center"
            >
              CURRENT BUBBLE
            </h3>
            <div class="flex justify-center">
              <canvas
                id="current-bubble"
                width="64"
                height="64"
                class="rounded-full shadow-lg"></canvas>
            </div>
          </Card>

          <!-- Next Bubble -->
          <Card variant="glass" class="p-6">
            <h3
              class="text-lg font-orbitron font-bold text-purple-400 mb-4 text-center"
            >
              NEXT BUBBLE
            </h3>
            <div class="flex justify-center">
              <canvas
                id="next-bubble"
                width="48"
                height="48"
                class="rounded-full shadow-lg"></canvas>
            </div>
          </Card>

          <!-- Controls Guide -->
          <Card variant="glass" class="p-6">
            <h3 class="text-lg font-orbitron font-bold text-cyan-400 mb-4">
              CONTROLS
            </h3>
            <div class="space-y-2 text-sm">
              <div class="flex justify-between">
                <span class="text-gray-400">Aim:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">Mouse</Badge>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Shoot:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">Click</Badge>
              </div>
              <div class="flex justify-between">
                <span class="text-gray-400">Pause:</span>
                <Badge variant="outline" class="px-2 py-1 text-xs">P</Badge>
              </div>
            </div>
          </Card>

          <!-- Game Rules -->
          <Card variant="glass" class="p-6">
            <h3 class="text-lg font-orbitron font-bold text-purple-400 mb-4">
              RULES
            </h3>
            <div class="space-y-2 text-sm text-gray-300">
              <p>â€¢ Match 3+ bubbles of the same color</p>
              <p>â€¢ Bubbles must be connected to pop</p>
              <p>â€¢ New row appears after each shot</p>
              <p>â€¢ Game ends when bubbles reach bottom</p>
              <p>â€¢ Higher combos = more points</p>
            </div>
          </Card>
        </div>
      </div>
    </div>

    <!-- Bubble Shooter Game Logic -->
    <script is:inline>
      // Initialize game when page loads
      document.addEventListener('DOMContentLoaded', async () => {
        // Dynamic imports to avoid SSR issues
        const gameModule = await import('/src/lib/games/bubble-shooter/game.js')
        const rendererModule = await import(
          '/src/lib/games/bubble-shooter/renderer.js'
        )
        const scoreModule = await import('/src/lib/services/scoreService.js')
        const gamesModule = await import('/src/lib/games/index.js')

        const {
          createGameState,
          initializeGrid,
          generateBubble,
          generateNextBubble,
          updateCurrentBubbleDisplay,
          updateNextBubbleDisplay,
          handleMouseMove,
          handleClick,
          startGame,
          resetGame,
          togglePause,
          gameLoop,
          draw,
          endGame,
          GAME_CONSTANTS,
        } = gameModule
        const { setupPixiJS } = rendererModule
        const { saveGameScore } = scoreModule
        const { GameID } = gamesModule
        const gameContainer = document.getElementById('game-container')!
        const currentBubbleCanvas = document.getElementById(
          'current-bubble'
        ) as HTMLCanvasElement
        const currentBubbleCtx = currentBubbleCanvas.getContext('2d')!
        const nextBubbleCanvas = document.getElementById(
          'next-bubble'
        ) as HTMLCanvasElement
        const nextBubbleCtx = nextBubbleCanvas.getContext('2d')!

        // Initialize game state
        const state = createGameState()
        const renderer = await setupPixiJS(gameContainer, GAME_CONSTANTS)

        // Enhanced game state with game over callback
        const enhancedState = {
          ...state,
          onGameOver: async (finalScore: number, stats: any) => {
            // Update final stats in overlay
            document.getElementById('final-score')!.textContent =
              finalScore.toString()
            document.getElementById('final-bubbles-popped')!.textContent = (
              stats.bubblesPopped || 0
            ).toString()
            document.getElementById('final-shots')!.textContent = (
              stats.shotsFired || 0
            ).toString()
            document.getElementById('final-accuracy')!.textContent =
              `${Math.round(stats.accuracy || 0)}%`
            document.getElementById('final-combo')?.textContent = (
              stats.largestCombo || 0
            ).toString()

            // Show game over overlay
            const gameOverOverlay =
              document.getElementById('game-over-overlay')!
            gameOverOverlay.classList.remove('hidden')

            // Reset buttons
            const startBtn = document.getElementById('start-btn')!
            const endBtn = document.getElementById('end-btn')!
            startBtn.style.display = 'inline-flex'
            endBtn.style.display = 'none'

            // Submit score
            try {
              await saveGameScore(
                GameID.BUBBLE_SHOOTER,
                finalScore,
                result => {
                  // Handle newly earned achievements
                  if (
                    result.newAchievements &&
                    result.newAchievements.length > 0
                  ) {
                    // Dispatch an event for achievement notifications
                    window.dispatchEvent(
                      new CustomEvent('achievementsEarned', {
                        detail: { achievementIds: result.newAchievements },
                      })
                    )
                  }
                  console.log('Score saved successfully')
                },
                error => {
                  console.error('Failed to submit score:', error)
                }
              )
            } catch (error) {
              console.error('Failed to submit score:', error)
            }
          },
        }

        // Helper functions that close over local state
        const updateCurrentBubbleDisplayFn = () =>
          updateCurrentBubbleDisplay(
            enhancedState,
            currentBubbleCtx,
            currentBubbleCanvas
          )

        const updateNextBubbleDisplayFn = () =>
          updateNextBubbleDisplay(
            enhancedState,
            nextBubbleCtx,
            nextBubbleCanvas
          )

        const gameLoopFn = () => {
          if (
            enhancedState.gameStarted &&
            !enhancedState.gameOver &&
            !enhancedState.paused
          ) {
            gameLoop(enhancedState, renderer)
          }
        }

        // Setup event listeners
        function setupEventListeners() {
          document
            .getElementById('start-btn')
            ?.addEventListener('click', () => {
              startGame(enhancedState, gameLoopFn)
              // Show end button when game starts
              const startBtn = document.getElementById('start-btn')!
              const endBtn = document.getElementById('end-btn')!
              startBtn.style.display = 'none'
              endBtn.style.display = 'inline-flex'
            })
          document.getElementById('end-btn')?.addEventListener('click', () => {
            endGame(enhancedState)
          })
          document
            .getElementById('pause-btn')
            ?.addEventListener('click', () =>
              togglePause(enhancedState, gameLoopFn)
            )
          document
            .getElementById('reset-btn')
            ?.addEventListener('click', () => {
              const gameOverOverlay =
                document.getElementById('game-over-overlay')!
              gameOverOverlay.classList.add('hidden')
              resetGame(
                enhancedState,
                updateCurrentBubbleDisplayFn,
                updateNextBubbleDisplayFn
              )
            })
          document
            .getElementById('restart-btn')
            ?.addEventListener('click', () => {
              const gameOverOverlay =
                document.getElementById('game-over-overlay')!
              gameOverOverlay.classList.add('hidden')
              resetGame(
                enhancedState,
                updateCurrentBubbleDisplayFn,
                updateNextBubbleDisplayFn
              )
            })
          document
            .getElementById('resume-btn')
            ?.addEventListener('click', () =>
              togglePause(enhancedState, gameLoopFn)
            )

          if (renderer.app && renderer.app.canvas) {
            renderer.app.canvas.addEventListener('mousemove', e =>
              handleMouseMove(e, enhancedState, renderer)
            )
            renderer.app.canvas.addEventListener('click', e =>
              handleClick(e, enhancedState, updateCurrentBubbleDisplayFn)
            )
          }

          // Keyboard controls
          document.addEventListener('keydown', e => {
            if (e.key === 'p' || e.key === 'P') {
              togglePause(enhancedState, gameLoopFn)
            }
          })
        }

        // Initialize everything
        setupEventListeners()
        initializeGrid(enhancedState)
        generateBubble(enhancedState)
        generateNextBubble(enhancedState)
        updateCurrentBubbleDisplayFn()
        updateNextBubbleDisplayFn()

        // Start continuous draw loop for rendering
        function drawLoop() {
          draw(renderer, enhancedState, GAME_CONSTANTS)
          requestAnimationFrame(drawLoop)
        }
        drawLoop()
      })
    </script>
  </div>
</AppLayout>
