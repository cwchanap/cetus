---
import AppLayout from '@/layouts/AppLayout.astro'
import Button from '@/components/ui/Button.astro'
import Card from '@/components/ui/Card.astro'
import Badge from '@/components/ui/Badge.astro'

// Custom navigation for game pages with breadcrumb
const gameNavigation = [
  { href: '/', label: 'Home' },
  { href: '#', label: 'Quick Draw Challenge' },
]
---

<AppLayout
  title="Quick Draw Challenge - Cetus Minigames"
  description="Test your drawing skills against the clock in this futuristic drawing challenge"
  includeFooter={false}
  navigation={gameNavigation}
>
  <!-- Game Breadcrumb -->
  <div class="px-6 py-4 border-b border-slate-700/50">
    <div class="max-w-7xl mx-auto">
      <div class="flex items-center space-x-3">
        <div class="text-cyan-400 text-sm">
          üé® Single Player Drawing Challenge
        </div>
      </div>
    </div>
  </div>

  <div class="px-6 py-8">
    <div class="max-w-7xl mx-auto">
      <!-- Game Status Bar -->
      <div class="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-8">
        <Card variant="sci-fi" class="p-6 text-center">
          <h3 class="text-lg font-orbitron font-bold mb-2 text-cyan-400">
            Score
          </h3>
          <div class="text-3xl font-bold text-white" id="score-counter">0</div>
        </Card>

        <Card variant="sci-fi" class="p-6 text-center">
          <h3 class="text-lg font-orbitron font-bold mb-2 text-purple-400">
            Time Remaining
          </h3>
          <div class="text-3xl font-bold text-white" id="timer">01:30</div>
        </Card>

        <Card variant="sci-fi" class="p-6 text-center">
          <h3 class="text-lg font-orbitron font-bold mb-2 text-pink-400">
            Current Round
          </h3>
          <div class="text-xl font-bold text-white" id="round-counter">
            1 / 5
          </div>
        </Card>
      </div>

      <!-- Main Game Area -->
      <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <!-- Drawing Canvas Section -->
        <div class="lg:col-span-3">
          <Card variant="sci-fi" class="p-6">
            <!-- Word Display (for artist) -->
            <div class="mb-4 text-center">
              <div
                class="bg-gradient-to-r from-cyan-500/20 to-purple-500/20 border border-cyan-400/30 rounded-lg p-4"
              >
                <p class="text-sm text-cyan-400 mb-1">Draw this word:</p>
                <h2
                  class="text-2xl font-orbitron font-bold text-white"
                  id="word-to-draw"
                >
                  SPACESHIP
                </h2>
              </div>
            </div>

            <!-- Drawing Tools -->
            <div
              class="flex items-center justify-between mb-4 p-4 bg-glass border border-slate-600/50 rounded-lg"
            >
              <div class="flex items-center space-x-4">
                <div class="flex items-center space-x-2">
                  <span class="text-sm text-gray-400">Brush:</span>
                  <button
                    class="w-10 h-10 bg-glass border border-cyan-400 bg-cyan-400/20 rounded-lg flex items-center justify-center hover:border-cyan-400 transition-colors"
                    data-tool="brush"
                  >
                    <span class="text-xl">üñåÔ∏è</span>
                  </button>
                  <button
                    class="w-10 h-10 bg-glass border border-slate-600 rounded-lg flex items-center justify-center hover:border-cyan-400 transition-colors"
                    data-tool="eraser"
                  >
                    <span class="text-xl">üßΩ</span>
                  </button>
                </div>

                <div class="flex items-center space-x-2">
                  <span class="text-sm text-gray-400">Size:</span>
                  <input
                    type="range"
                    id="brush-size"
                    min="1"
                    max="20"
                    value="3"
                    class="w-20 accent-cyan-400"
                  />
                  <span id="size-display" class="text-sm text-white w-6">3</span
                  >
                </div>
              </div>

              <div class="flex items-center space-x-2">
                <span class="text-sm text-gray-400">Colors:</span>
                <div class="flex space-x-1">
                  <button
                    class="w-8 h-8 rounded-full border-2 border-cyan-400 ring-2 ring-cyan-400/50 hover:border-white transition-colors cursor-pointer"
                    data-color="#ffffff"
                    style="background-color: #ffffff;"></button>
                  <button
                    class="w-8 h-8 rounded-full border-2 border-slate-600 hover:border-white transition-colors cursor-pointer"
                    data-color="#000000"
                    style="background-color: #000000;"></button>
                  <button
                    class="w-8 h-8 rounded-full border-2 border-slate-600 hover:border-white transition-colors cursor-pointer"
                    data-color="#ff0000"
                    style="background-color: #ff0000;"></button>
                  <button
                    class="w-8 h-8 rounded-full border-2 border-slate-600 hover:border-white transition-colors cursor-pointer"
                    data-color="#00ff00"
                    style="background-color: #00ff00;"></button>
                  <button
                    class="w-8 h-8 rounded-full border-2 border-slate-600 hover:border-white transition-colors cursor-pointer"
                    data-color="#0000ff"
                    style="background-color: #0000ff;"></button>
                  <button
                    class="w-8 h-8 rounded-full border-2 border-slate-600 hover:border-white transition-colors cursor-pointer"
                    data-color="#ffff00"
                    style="background-color: #ffff00;"></button>
                  <button
                    class="w-8 h-8 rounded-full border-2 border-slate-600 hover:border-white transition-colors cursor-pointer"
                    data-color="#ff00ff"
                    style="background-color: #ff00ff;"></button>
                  <button
                    class="w-8 h-8 rounded-full border-2 border-slate-600 hover:border-white transition-colors cursor-pointer"
                    data-color="#00ffff"
                    style="background-color: #00ffff;"></button>
                </div>
                <Button variant="outline" size="sm" id="clear-canvas">
                  Clear
                </Button>
              </div>
            </div>

            <!-- Canvas -->
            <div
              class="relative bg-white rounded-lg border-2 border-cyan-400/30 overflow-hidden"
              style="aspect-ratio: 16/10;"
            >
              <div id="drawing-container" class="w-full h-full"></div>
            </div>
          </Card>
        </div>

        <!-- Sidebar -->
        <div class="space-y-6">
          <!-- Current Challenge -->
          <Card variant="sci-fi" class="p-6">
            <h3 class="text-lg font-orbitron font-bold mb-4 text-cyan-400">
              <span class="mr-2">üéØ</span>
              Challenge
            </h3>
            <div class="text-center">
              <div class="text-lg font-bold text-white mb-2">
                Draw the word above!
              </div>
              <p class="text-gray-400 text-sm mb-4">
                You have 90 seconds to complete your drawing.
              </p>

              <div class="space-y-2">
                <div class="flex justify-between text-sm">
                  <span class="text-gray-400">Best Time:</span>
                  <span class="text-green-400 font-medium">45s</span>
                </div>
                <div class="flex justify-between text-sm">
                  <span class="text-gray-400">High Score:</span>
                  <span class="text-cyan-400 font-medium">2,850</span>
                </div>
              </div>
            </div>
          </Card>

          <!-- Progress -->
          <Card variant="sci-fi" class="p-6">
            <h3 class="text-lg font-orbitron font-bold mb-4 text-purple-400">
              <span class="mr-2">üìà</span>
              Progress
            </h3>
            <div class="space-y-3">
              <div class="flex justify-between items-center">
                <span class="text-gray-300">Round 1</span>
                <Badge variant="success" size="sm">‚úì Complete</Badge>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-300">Round 2</span>
                <Badge variant="warning" size="sm">‚óè Current</Badge>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-400">Round 3</span>
                <Badge variant="outline" size="sm">‚óã Pending</Badge>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-400">Round 4</span>
                <Badge variant="outline" size="sm">‚óã Pending</Badge>
              </div>
              <div class="flex justify-between items-center">
                <span class="text-gray-400">Round 5</span>
                <Badge variant="outline" size="sm">‚óã Pending</Badge>
              </div>
            </div>
          </Card>

          <!-- Game Controls -->
          <Card variant="sci-fi" class="p-6">
            <h3 class="text-lg font-orbitron font-bold mb-4 text-pink-400">
              <span class="mr-2">üéÆ</span>
              Controls
            </h3>
            <div class="space-y-3">
              <Button
                variant="outline"
                class="w-full justify-start"
                id="new-word-btn"
              >
                <span class="mr-2">üîÑ</span>
                New Word
              </Button>
              <Button
                variant="outline"
                class="w-full justify-start"
                id="skip-round-btn"
              >
                <span class="mr-2">‚è≠Ô∏è</span>
                Skip Round
              </Button>
              <Button
                variant="primary"
                class="w-full justify-start"
                id="finish-drawing-btn"
              >
                <span class="mr-2">‚úÖ</span>
                Finish Drawing
              </Button>
              <Button
                variant="destructive"
                class="w-full justify-start"
                id="quit-game-btn"
              >
                <span class="mr-2">üö™</span>
                Quit Game
              </Button>
            </div>
          </Card>
        </div>
      </div>
    </div>

    <style>
      #drawing-container canvas {
        cursor: crosshair;
      }

      .cursor-brush canvas {
        cursor:
          url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><circle cx="8" cy="8" r="2" fill="cyan"/></svg>')
            8 8,
          crosshair;
      }

      .cursor-eraser canvas {
        cursor:
          url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 16 16"><rect x="4" y="4" width="8" height="8" fill="red" opacity="0.5"/></svg>')
            8 8,
          crosshair;
      }
    </style>

    <script>
      import * as PIXI from 'pixi.js'

      // Drawing functionality with PixiJS
      document.addEventListener('DOMContentLoaded', async () => {
        const container = document.getElementById('drawing-container')
        if (!container) {
          return
        }

        // Create PixiJS application
        const app = new PIXI.Application()
        await app.init({
          width: 800,
          height: 500,
          backgroundColor: '#ffffff',
          antialias: true,
          resolution: window.devicePixelRatio || 1,
          autoDensity: true,
        })

        // Add the canvas to the DOM
        container.appendChild(app.canvas)
        app.canvas.style.width = '100%'
        app.canvas.style.height = '100%'
        app.canvas.style.cursor = 'crosshair'

        // Drawing state
        let isDrawing = false
        let currentTool = 'brush'
        let currentColor = 0xffffff // White in hex
        let currentSize = 3
        let lastPoint = { x: 0, y: 0 }

        // Create graphics object for drawing
        const drawingGraphics = new PIXI.Graphics()
        app.stage.addChild(drawingGraphics)

        // Color conversion helper
        function hexStringToNumber(hexString: string): number {
          return parseInt(hexString.replace('#', ''), 16)
        }

        function getLocalPosition(event: MouseEvent | Touch): PIXI.Point {
          const rect = app.canvas.getBoundingClientRect()
          const scaleX = app.screen.width / rect.width
          const scaleY = app.screen.height / rect.height

          return new PIXI.Point(
            (event.clientX - rect.left) * scaleX,
            (event.clientY - rect.top) * scaleY
          )
        }

        function startDrawing(event: MouseEvent | Touch) {
          isDrawing = true
          const point = getLocalPosition(event)
          lastPoint = { x: point.x, y: point.y }

          // Start a new drawing path for brush tool
          if (currentTool === 'brush') {
            drawingGraphics.moveTo(point.x, point.y)
          }
        }

        function draw(event: MouseEvent | Touch) {
          if (!isDrawing) {
            return
          }

          const point = getLocalPosition(event)

          if (currentTool === 'brush') {
            // Draw smooth line with current color
            drawingGraphics.stroke({
              color: currentColor,
              width: currentSize,
              cap: 'round',
              join: 'round',
            })
            drawingGraphics.moveTo(lastPoint.x, lastPoint.y)
            drawingGraphics.lineTo(point.x, point.y)
          } else if (currentTool === 'eraser') {
            // Eraser using destination-out blend mode
            const tempGraphics = new PIXI.Graphics()
            tempGraphics.blendMode = 'destination-out' as any
            tempGraphics.circle(point.x, point.y, currentSize)
            tempGraphics.fill(0xffffff)
            app.stage.addChild(tempGraphics)

            // Remove the temporary graphics after a frame
            setTimeout(() => {
              app.stage.removeChild(tempGraphics)
            }, 16)
          }

          lastPoint = { x: point.x, y: point.y }
        }

        function stopDrawing() {
          isDrawing = false
        }

        function clearCanvas() {
          drawingGraphics.clear()
          // Redraw white background
          drawingGraphics.rect(0, 0, app.screen.width, app.screen.height)
          drawingGraphics.fill(0xffffff)
        }

        function updateCursor() {
          if (currentTool === 'brush') {
            app.canvas.className = 'w-full h-full cursor-brush'
          } else {
            app.canvas.className = 'w-full h-full cursor-eraser'
          }
        }

        // Mouse events
        app.canvas.addEventListener('mousedown', e => startDrawing(e))
        app.canvas.addEventListener('mousemove', e => draw(e))
        app.canvas.addEventListener('mouseup', stopDrawing)
        app.canvas.addEventListener('mouseleave', stopDrawing)

        // Touch events
        app.canvas.addEventListener('touchstart', e => {
          e.preventDefault()
          startDrawing(e.touches[0])
        })
        app.canvas.addEventListener('touchmove', e => {
          e.preventDefault()
          draw(e.touches[0])
        })
        app.canvas.addEventListener('touchend', e => {
          e.preventDefault()
          stopDrawing()
        })

        // Tool selection
        document.querySelectorAll('[data-tool]').forEach(btn => {
          btn.addEventListener('click', () => {
            // Remove active state from all tool buttons
            document.querySelectorAll('[data-tool]').forEach(b => {
              b.classList.remove('border-cyan-400', 'bg-cyan-400/20')
              b.classList.add('border-slate-600')
            })
            // Add active state to clicked button
            btn.classList.remove('border-slate-600')
            btn.classList.add('border-cyan-400', 'bg-cyan-400/20')

            const toolBtn = btn as HTMLElement
            currentTool = toolBtn.dataset.tool || 'brush'
            updateCursor()
          })
        })

        // Color selection
        document.querySelectorAll('[data-color]').forEach(btn => {
          btn.addEventListener('click', () => {
            // Remove active state from all color buttons
            document.querySelectorAll('[data-color]').forEach(b => {
              b.classList.remove(
                'border-cyan-400',
                'ring-2',
                'ring-cyan-400/50'
              )
              b.classList.add('border-slate-600')
            })
            // Add active state to clicked button
            btn.classList.remove('border-slate-600')
            btn.classList.add('border-cyan-400', 'ring-2', 'ring-cyan-400/50')

            const colorBtn = btn as HTMLElement
            const colorStr = colorBtn.dataset.color || '#ffffff'
            currentColor = hexStringToNumber(colorStr)
          })
        })

        // Brush size
        const sizeSlider = document.getElementById(
          'brush-size'
        ) as HTMLInputElement
        const sizeDisplay = document.getElementById('size-display')
        if (sizeSlider && sizeDisplay) {
          sizeSlider.addEventListener('input', () => {
            currentSize = parseInt(sizeSlider.value)
            sizeDisplay.textContent = currentSize.toString()
          })
        }

        // Clear canvas
        const clearBtn = document.getElementById('clear-canvas')
        if (clearBtn) {
          clearBtn.addEventListener('click', clearCanvas)
        }

        // Chat functionality
        function addGameMessage(
          message: string,
          type: 'info' | 'success' | 'warning' = 'info'
        ) {
          const scoreDisplay = document.getElementById('score-counter')
          if (!scoreDisplay) {
            return
          }

          // Show message as a temporary overlay or update score
          // TODO: Implement proper game message display
        }

        function updateScore(points: number) {
          const scoreDisplay = document.getElementById('score-counter')
          if (!scoreDisplay) {
            return
          }

          const currentScore = parseInt(scoreDisplay.textContent || '0')
          const newScore = currentScore + points
          scoreDisplay.textContent = newScore.toString()
        }

        // Single player game words
        const gameWords = [
          'SPACESHIP',
          'ROBOT',
          'PLANET',
          'STAR',
          'GALAXY',
          'ROCKET',
          'ALIEN',
          'METEOR',
          'COMET',
          'SATELLITE',
          'ASTRONAUT',
          'MOON',
          'SUN',
          'UNIVERSE',
          'NEBULA',
          'ASTEROID',
          'TELESCOPE',
          'ORBIT',
        ]

        const currentWordIndex = 0
        let currentRound = 1
        const gameScore = 0

        function getNextWord() {
          const word = gameWords[Math.floor(Math.random() * gameWords.length)]
          const wordDisplay = document.getElementById('word-to-draw')
          if (wordDisplay) {
            wordDisplay.textContent = word
          }
          return word
        }

        function nextRound() {
          currentRound++
          const roundDisplay = document.getElementById('round-counter')
          if (roundDisplay) {
            roundDisplay.textContent = `${currentRound} / 5`
          }

          if (currentRound > 5) {
            // Game complete
            addGameMessage('Game Complete! Well done!', 'success')
            return
          }

          getNextWord()
          resetTimer()
        }

        function setupTimer() {
          let timeLeft = 90 // 1:30
          const timerDisplay = document.getElementById('timer')
          if (!timerDisplay) {
            return
          }

          const timer = setInterval(() => {
            const minutes = Math.floor(timeLeft / 60)
            const seconds = timeLeft % 60
            timerDisplay.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`

            if (timeLeft <= 0) {
              clearInterval(timer)
              addGameMessage("Time's up! Moving to next round...", 'warning')
              setTimeout(() => nextRound(), 2000)
            }
            timeLeft--
          }, 1000)

          return timer
        }

        function resetTimer() {
          setupTimer()
        }

        // Game control handlers
        const newWordBtn = document.getElementById('new-word-btn')
        const skipRoundBtn = document.getElementById('skip-round-btn')
        const finishDrawingBtn = document.getElementById('finish-drawing-btn')
        const quitGameBtn = document.getElementById('quit-game-btn')

        if (newWordBtn) {
          newWordBtn.addEventListener('click', () => {
            getNextWord()
            addGameMessage('New word generated!', 'info')
          })
        }

        if (skipRoundBtn) {
          skipRoundBtn.addEventListener('click', () => {
            nextRound()
          })
        }

        if (finishDrawingBtn) {
          finishDrawingBtn.addEventListener('click', () => {
            const basePoints = 100
            const timerElement = document.getElementById('timer')
            const timeRemaining = timerElement?.textContent || '01:30'
            const [minutes, seconds] = timeRemaining.split(':').map(Number)
            const totalSecondsLeft = minutes * 60 + seconds
            const timeBonus = Math.max(0, totalSecondsLeft * 2) // 2 points per second remaining
            const totalPoints = basePoints + timeBonus

            updateScore(totalPoints)
            addGameMessage(
              `Drawing completed! +${totalPoints} points`,
              'success'
            )

            setTimeout(() => nextRound(), 2000)
          })
        }

        if (quitGameBtn) {
          quitGameBtn.addEventListener('click', () => {
            if (
              confirm(
                'Are you sure you want to quit the game? Your progress will be lost.'
              )
            ) {
              window.location.href = '/'
            }
          })
        }

        // Initialize everything
        clearCanvas() // Set white background
        setupTimer()
        updateCursor()
        getNextWord() // Start with first word

        // Handle window resize
        window.addEventListener('resize', () => {
          const rect = container.getBoundingClientRect()
          app.renderer.resize(rect.width, rect.height)
        })
      })
    </script>
  </div>
</AppLayout>
